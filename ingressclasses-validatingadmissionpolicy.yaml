---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: tenant-ingressclass
spec:
  failurePolicy: Fail
  paramKind:
    apiVersion: capsule.clastix.io/v1beta2
    kind: Tenant
  # Evaluate this policy only for requests made by user groups
  # in `CapsuleConfiguration.spec.capsuleGroup`.
  # TODO: match also non-User Tenant owners.
  # TODO: find a way to parameterize also the CapsuleGroup (i.e. 'capsule.clastix.io').
  # TODO: support impersonation. See sample-tenant-owner-impersonation-admissionreview.yaml.
  matchConditions:
  - expression: "(request.userInfo.groups.all(e, (e in ['capsule.clastix.io'])) && request.userInfo.username in params.spec.owners.filter(e, e.kind == 'User').map(x, x.name))"
    name: include-only-tenant-owners
  matchConstraints:
    # Match also for different requests on object's api versions.
    matchPolicy: Equivalent
    resourceRules:
    - apiGroups: ["networking.k8s.io"]
      apiVersions: ["v1"]
      resources: ["ingresses"]
      operations: ["CREATE", "UPDATE"]
  validations:
  # TODO: support allowedRegex besides exact class list.
  # TODO: support params, as documented in https://kubernetes.io/docs/reference/access-authn-authz/validating-admission-policy/#validation-expression.
  #- expression: "object.spec.ingressClassName in params.spec.ingressOptions.allowedClass.allowed"
  #
  # The status.typeChecking returns an expressionWarning:
  # networking.k8s.io/v1, Kind=Ingress: ERROR: <input>:1:33: undeclared reference to 'params' (in container '')
  #         | object.spec.ingressClassName in params.spec.ingressOptions.allowedClass.allowed
  - expression: "object.spec.ingressClassName in ['bronze']"
    message: "Ingress class not allowed"
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: tenant-ingressclass-oil
spec:
  policyName: tenant-ingressclass
  validationActions: [Deny]
  paramRef:
    name: oil
    parameterNotFoundAction: Deny
